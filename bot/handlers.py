import json
import logging
import re
from datetime import date, time
from decimal import Decimal

from aiogram.exceptions import (
    TelegramBadRequest,
    TelegramUnauthorizedError,
)
from aiogram import Bot, F, Router
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    ErrorEvent,
    FSInputFile,
    InlineKeyboardMarkup,
    LabeledPrice,
    Message,
    PreCheckoutQuery
)
from asgiref.sync import sync_to_async

from django.conf import settings
from django.core.exceptions import ObjectDoesNotExist
from django.db import IntegrityError
from django.utils import timezone

import bot.keyboards as kb
import bot.requests as rq

from bot.models import CourierDelivery, Florist, FloristCallback, FSMData, Item
from bot.requests import get_all_items, get_category_item
from bot.keyboards import (
    confirm_phone_keyboard,
    create_courier_keyboard,
    create_florist_keyboard,
    create_pagination_buttons,
    filter_bouquets,
    for_another_reason,
    items
)


logging.basicConfig(
    format="[%(asctime)s] - %(levelname)s - %(funcName)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

router = Router()

ITEMS_PER_PAGE = 3


class ResponseFormatError(Exception):
    """–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    pass


class ServerError(Exception):
    """–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    pass


class OrderState(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏."""
    choosing_occasion = State()
    choosing_price = State()
    waiting_for_name = State()
    waiting_for_address = State()
    waiting_for_date = State()
    waiting_for_time = State()
    waiting_for_phone = State()
    confrim_for_phone = State()
    waiting_item_price = State()
    waiting_consultation = State()
    viewing_all_items = State()
    current_page = State()


@router.errors()
async def error_handler(event: ErrorEvent) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–µ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤.

    Args:
        event (ErrorEvent): –°–æ–±—ã—Ç–∏–µ –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ.
    """
    error = event.exception
    logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: %s", error, exc_info=True)

    message = event.update.message
    if not message:
        return

    error_message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º."

    if isinstance(error, TelegramBadRequest):
        error_message = "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."

    elif isinstance(error, TelegramUnauthorizedError):
        error_message = "‚ùå –û—à–∏–±–∫–∞: –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."

    elif isinstance(error, ResponseFormatError):
        error_message = "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö."

    elif isinstance(error, ServerError):
        error_message = "‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    # elif isinstance(error, RequestException):
    #     error_message = "‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."

    elif isinstance(error, (ValueError, KeyError)):
        error_message = "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."

    elif isinstance(error, TimeoutError):
        error_message = "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞."
    try:
        await event.update.message.answer(error_message)
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", e)


async def show_welcome_message(message: Message) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω —Ü–≤–µ—Ç–æ–≤ 'FlowerShop'."
        "–ó–∞–∫–∞–∂–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–≥–æ –±—É–∫–µ—Ç–∞, —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—à–∏—Ö –ª—é–±–∏–º—ã—Ö, "
        "—Ä–æ–¥–Ω—ã—Ö –∏ –∫–æ–ª–ª–µ–≥.\n–ù–∞—à –±—É–∫–µ—Ç —Å–æ —Å–º—ã—Å–ª–æ–º —Å—Ç–∞–Ω–µ—Ç –≥–ª–∞–≤–Ω—ã–º –ø–æ–¥–∞—Ä–∫–æ–º –Ω–∞ –≤–∞—à–µ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–µ!"
        "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
    )

    pdf_file = "form.pdf"
    try:
        await message.answer_document(FSInputFile(pdf_file))
    except FileNotFoundError:
        await message.answer(
            "–§–∞–π–ª —Å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    await message.answer(
        "–ü–æ—Å–ª–µ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
        "‚úÖ –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–∏–Ω—è—Ç—å', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É—Å–ª—É–≥–∞–º–∏ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.\n\n"
        "‚ö†Ô∏è –ù–∞–∂–∏–º–∞—è '–ü—Ä–∏–Ω—è—Ç—å', —è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é —Å–≤–æ—ë —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.",
        reply_markup=kb.form_button
    )


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É `/start`.

    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–∞–∫–∂–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    await rq.set_user(message.from_user.id)
    fsm_data = await sync_to_async(
        FSMData.objects.filter(user_id=message.from_user.id).first)()

    if fsm_data and fsm_data.state:
        await message.answer(
            "–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
            reply_markup=kb.choice_continue_or_restart()
        )
    else:
        await show_welcome_message(message)


@router.callback_query(F.data == "restart")
async def restart_dialog(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –¥–∏–∞–ª–æ–≥, –æ—á–∏—â–∞—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

    Args:
        callback (CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    await state.clear()
    await show_welcome_message(callback.message)


@router.callback_query(F.data == "continue")
async def continue_dialog(callback: CallbackQuery, state: FSMContext) -> None:
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–∏–∞–ª–æ–≥.

    Args:
        callback (CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    fsm_data = await sync_to_async(
        FSMData.objects.filter(user_id=callback.from_user.id).first)()

    if not fsm_data:
        await callback.message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
        await state.clear()
        return

    await state.set_state(fsm_data.state)

    try:
        data = json.loads(fsm_data.data)
        await state.set_data(data)
    except (TypeError, json.JSONDecodeError):
        data = {}

    current_state = await state.get_state()

    if current_state == OrderState.choosing_occasion.state:
        await callback.message.answer(
            "–î–∞–≤–∞–π—Ç–µ –ø–æ–¥–±–µ—Ä–µ–º –±—É–∫–µ—Ç.\n"
            "–ö –∫–∞–∫–æ–º—É —Å–æ–±—ã—Ç–∏—é –≥–æ—Ç–æ–≤–∏–º—Å—è? –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –ª–∏–±–æ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π",
            reply_markup=await kb.categories())

    elif current_state == OrderState.choosing_price.state:
        await callback.message.answer(
            "–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?",
            reply_markup=await kb.price())

    elif current_state == OrderState.waiting_for_name.state:
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")
    elif current_state == OrderState.waiting_for_address.state:
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    elif current_state == OrderState.waiting_for_date.state:
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ (–ì–ì–ì–ì-–ú–ú-–î–î):")
    elif current_state == OrderState.waiting_for_time.state:
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–ß–ß:–ú–ú):")
    elif current_state == OrderState.waiting_for_phone.state:
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    elif current_state == OrderState.confrim_for_phone.state:
        phone = data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')
        await callback.message.answer(
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}",
            reply_markup=await kb.confirm_phone_keyboard())
    elif current_state == OrderState.waiting_item_price.state:
        await callback.message.answer(
            "–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?",
            reply_markup=await kb.price())
    elif current_state == OrderState.waiting_consultation.state:
        await callback.message.answer(
            "–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
            reply_markup=await kb.continue_consult)
    elif current_state == OrderState.viewing_all_items.state:
        await callback.message.answer(
            "–í—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –≤—Å–µ –±—É–∫–µ—Ç—ã. –•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –µ—â–µ –±–æ–ª–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ?\n"
            "–ü–æ–¥–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –±—É–∫–µ—Ç –∏–∑ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–ª–∏ –∑–∞–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Ñ–ª–æ—Ä–∏—Å—Ç–∞",
            reply_markup=await kb.for_another_reason()
        )

    else:
        await callback.message.answer("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –∫–∞—Ç–∞–ª–æ–≥–∞.")
        await catalog(callback.message, state)   


async def save_fsm_data(user_id: int, state: FSMContext) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.

    Args:
        user_id (int): Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    try:
        current_state = await state.get_state()
        data = await state.get_data()
        serialized_data = {}

        for key, value in data.items():
            if isinstance(value, (date, time)):
                serialized_data[key] = value.isoformat()
            elif isinstance(value, Decimal):
                serialized_data[key] = float(value)
            elif isinstance(value, list):
                serialized_data[key] = [
                    {
                        "id": getattr(item, 'id', None),
                        "name": getattr(item, 'name', None),
                        "price": float
                        (getattr(item, 'price', 0.0)) if isinstance(
                            getattr(item, 'price', None), (int, float)
                        ) else 0.0
                    }
                    for item in value
                ]
            elif isinstance(value, dict):
                serialized_data[key] = {
                    "id": value.get('id', None),
                    "name": value.get('name', None),
                    "price": float(value.get(
                        'price', 0.0)) if isinstance(
                            value.get('price'), (int, float)
                        ) else 0.0
                }
            else:
                serialized_data[key] = value

        await sync_to_async(FSMData.objects.update_or_create)(
            user_id=user_id,
            defaults={
                'state': current_state,
                'data': json.dumps(serialized_data, ensure_ascii=False)
            }
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {str(e)}")
        raise


async def load_fsm_data(user_id: int, state: FSMContext) -> None:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

    Args:
        user_id (int): Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    try:
        fsm_data = await sync_to_async(
            FSMData.objects.filter(user_id=user_id).first
        )()
        logger.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM: {fsm_data}")
        if fsm_data:
            await state.set_state(fsm_data.state)

            try:
                data = json.loads(fsm_data.data)

                for key, value in data.items():
                    if isinstance(value, list) and key == 'filtered_items':
                        data[key] = [
                            await sync_to_async(Item.objects.get)(id=item_dict["id"])
                            for item_dict in value
                        ]
                    elif isinstance(value, dict) and "id" in value:
                        data[key] = await sync_to_async(Item.objects.get)(id=value["id"])
                    elif isinstance(value, (int, float)):
                        data[key] = Decimal(str(value))
                await state.set_data(data)

            except (TypeError, json.JSONDecodeError) as e:
                logger.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %s", str(e))
                await state.set_data({})
    except ObjectDoesNotExist as e:
        logger.error("–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", str(e))
        await state.set_data({})
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: %s", str(e), exc_info=True)
        raise


async def reconstruct_item(item_dict: dict) -> Item:
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞ –ø–æ –µ–≥–æ —Å–ª–æ–≤–∞—Ä–Ω–æ–º—É –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—é.

    Args:
        item_dict (dict): –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ.

    Returns:
        Item: –û–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        item = await sync_to_async(Item.objects.get)(pk=item_dict['id'])
        return item
    except ObjectDoesNotExist:
        logger.error("–¢–æ–≤–∞—Ä —Å id=%s –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", item_dict['id'])
        raise ResponseFormatError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞")


@router.callback_query(F.data == "to_main")
async def to_main(callback: CallbackQuery, state: FSMContext) -> None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥.

    Args:
        callback (CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    await state.clear()
    await callback.message.answer(
        "–í–æ–∑–≤—Ä–∞—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥.",
        reply_markup=kb.main_menu
    )


@router.message(F.text == "–ü—Ä–∏–Ω—è—Ç—å")
async def event_form(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–∏–Ω—è—Ç—å' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    await save_fsm_data(message.from_user.id, state)
    await message.answer("‚úÖ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!")
    await catalog(message, state)


@router.message(F.text == "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è")
async def not_event_form(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    await message.answer(
        "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. "
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")

    await state.clear()


@router.message(F.text == "–ö–∞—Ç–∞–ª–æ–≥")
async def catalog(message: Message, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±—É–∫–µ—Ç–æ–≤.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    await save_fsm_data(message.from_user.id, state)
    await state.set_state(OrderState.choosing_occasion)
    await message.answer(
        "–î–∞–≤–∞–π—Ç–µ –ø–æ–¥–±–µ—Ä–µ–º –±—É–∫–µ—Ç.\n"
        "–ö –∫–∞–∫–æ–º—É —Å–æ–±—ã—Ç–∏—é –≥–æ—Ç–æ–≤–∏–º—Å—è? "
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –ª–∏–±–æ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π",
        reply_markup=await kb.categories())


@router.callback_query(
    F.data.startswith("category_"),
    OrderState.choosing_occasion,
)
async def choose_occasion(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–æ–±—ã—Ç–∏—è –¥–ª—è –±—É–∫–µ—Ç–∞.

    Args:
        callback (CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    occasion = callback.data.split("_")[1]
    await state.update_data(occasion=occasion)

    if occasion == '5':
        await handle_no_reason(callback, state)
    elif occasion == '6':
        await handle_another_reason(callback, state)
    else:
        await handle_regular_reason(callback, state)

    await save_fsm_data(callback.from_user.id, state)


async def handle_no_reason(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ.

    Args:
        callback (CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    all_items = await get_all_items()
    if not all_items:
        await callback.message.answer("–î–æ—Å—Ç—É–ø–Ω—ã—Ö –±—É–∫–µ—Ç–æ–≤ –Ω–µ—Ç")
        return

    await state.set_state(OrderState.viewing_all_items)
    await state.update_data(filtered_items=all_items)
    await state.update_data(current_page=1)
    await display_bouquets(callback, state)
    await save_fsm_data(callback.from_user.id, state)


async def handle_another_reason(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.

    Args:
        callback (CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:",
        reply_markup=for_another_reason()
    )
    await state.set_state(OrderState.waiting_consultation)
    await save_fsm_data(callback.from_user.id, state)


async def handle_regular_reason(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–π —Å–ª—É—á–∞–π –≤—ã–±–æ—Ä–∞ —Å–æ–±—ã—Ç–∏—è.

    Args:
        callback (CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    await state.set_state(OrderState.choosing_price)
    await callback.message.answer(
        "–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?",
        reply_markup=await kb.price()
    )

    await save_fsm_data(callback.from_user.id, state)


@router.callback_query(F.data.startswith("price_"), OrderState.choosing_price)
async def choose_price(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ü–µ–Ω—ã –¥–ª—è –±—É–∫–µ—Ç–∞.

    Args:
        callback (CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    price = callback.data.split("_")[1]
    await state.update_data(price=price)
    data = await state.get_data()
    occasion = data.get("occasion")
    price = data.get("price")
    filtered_items = await filter_bouquets(occasion, price)
    if not filtered_items:
        await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –±—É–∫–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    await state.set_state(OrderState.viewing_all_items)
    await state.update_data(filtered_items=filtered_items)
    await state.update_data(current_page=1)
    await display_bouquets(callback, state)
    await save_fsm_data(callback.from_user.id, state)


@router.callback_query(F.data.startswith("item_"))
async def category(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞.

    Args:
        callback (CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    try:
        item_id = callback.data.split("_")[1]
        item_data = await rq.get_item(item_id)

        await state.update_data(
            item_price=item_data['price'],
            item_photo=item_data['photo'],
            item_name=item_data['name'],
            occasion=item_data['category_id']
        )

        await save_fsm_data(callback.from_user.id, state)
        await state.set_state(OrderState.waiting_item_price)

        photo_path = f"media/{item_data['photo']}" if item_data['photo'] else None
        if photo_path:
            photo = FSInputFile(photo_path)
        else:
            await callback.message.answer("–§–æ—Ç–æ –±—É–∫–µ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")

        await callback.message.answer_photo(photo=photo)
        await callback.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä {item_data['name']}")
        await callback.message.answer(
            f"*–ë—É–∫–µ—Ç:* {item_data['name']}\n"
            f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {item_data['description']}\n"
            f"*–¶–≤–µ—Ç–æ—á–Ω—ã–π —Å–æ—Å—Ç–∞–≤:* {item_data['structure']}\n"
            f"*–¶–µ–Ω–∞:* {item_data['price']}—Ä.",
            parse_mode="Markdown"
        )
        await callback.message.answer(
            "*–•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –µ—â–µ –±–æ–ª–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ?*\n"
            "*–ü–æ–¥–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –±—É–∫–µ—Ç –∏–∑ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–ª–∏ –∑–∞–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Ñ–ª–æ—Ä–∏—Å—Ç–∞*",
            parse_mode="Markdown",
            reply_markup=kb.menu
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def display_bouquets(callback: CallbackQuery, state: FSMContext) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—É–∫–µ—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.

    Args:
        callback (CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    data = await state.get_data()
    all_items = data.get("filtered_items")
    current_page = data.get("current_page", 1)
    if not all_items:
        await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—É–∫–µ—Ç–æ–≤.")
        return

    start_index = (current_page - 1) * ITEMS_PER_PAGE
    end_index = start_index + ITEMS_PER_PAGE
    items_on_page = all_items[start_index:end_index]

    if not items_on_page:
        await callback.message.answer("–ù–µ—Ç –±—É–∫–µ—Ç–æ–≤ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
        return

    keyboard = await items(items_on_page)

    total_pages = (len(all_items) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
    navigation_buttons = kb.create_pagination_buttons(
        current_page,
        total_pages
    )

    page_info = f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page} –∏–∑ {total_pages}"
    await callback.message.edit_text(
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –±—É–∫–µ—Ç—ã:\n{page_info}", 
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=(
                keyboard.inline_keyboard + navigation_buttons.inline_keyboard)
            )
        )


@router.callback_query(F.data.startswith("page_"), OrderState.viewing_all_items)
async def navigate_pages(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤.

    Args:
        callback (CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    page = int(callback.data.split("_")[1])
    await state.update_data(current_page=page)
    await display_bouquets(callback, state)
    await save_fsm_data(callback.from_user.id, state)


@router.message(F.text == "–ó–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç")
async def order(message: Message, state: FSMContext) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞ –±—É–∫–µ—Ç–∞.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    await save_fsm_data(message.from_user.id, state)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")
    await state.set_state(OrderState.waiting_for_name)


@router.message(OrderState.waiting_for_name)
async def process_name(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    name = message.text.strip()
    if re.match(r'^[–ê-–Ø–∞-—èA-Za-z]{2,}$', name):
        await state.update_data(name=name)
        await message.answer(
            "üìç –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å, –∫—É–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å –±—É–∫–µ—Ç "
            "(–Ω–∞–ø—Ä–∏–º–µ—Ä, –≥. –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 15):"
        )
        await state.set_state(OrderState.waiting_for_address)
    else:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤).")

    await save_fsm_data(message.from_user.id, state)


@router.message(OrderState.waiting_for_address)
async def process_address(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """

    adress_pattern = re.compile(
        r"^(–≥\.\s*[–ê-–Ø–∞-—è–Å—ë\- ]+,\s*"
        r"(—É–ª\.|—É–ª–∏—Ü–∞|–ø—Ä–æ—Å–ø\.|–ø—Ä–æ—Å–ø–µ–∫—Ç|–ø—Ä-—Ç)\s*[–ê-–Ø–∞-—è–Å—ë\- ]+,\s*"
        r"(–¥\.|–¥–æ–º)\s*\d+[–ê-–Ø–∞-—è]*(,\s*(–∫–≤\.|–∫–≤–∞—Ä—Ç–∏—Ä–∞)\s*\d+)?$)"
    )

    address = message.text.strip()
    example_address = (
        "–ü—Ä–∏–º–µ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤:\n"
        "‚Ä¢ –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 15\n"
        "‚Ä¢ –≥. –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ù–µ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, –¥–æ–º 25/3, –∫–≤. 10"
    )

    errors = []

    if not address.startswith("–≥. "):
        errors.append("–ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —É–∫–∞–∑–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ (–≥. –ú–æ—Å–∫–≤–∞)")

    if "—É–ª." not in address and "—É–ª–∏—Ü–∞" not in address:
        errors.append("–£–∫–∞–∂–∏—Ç–µ —É–ª–∏—Ü—É (—É–ª. –õ–µ–Ω–∏–Ω–∞ –∏–ª–∏ —É–ª–∏—Ü–∞ –õ–µ–Ω–∏–Ω–∞)")

    if "–¥." not in address and "–¥–æ–º" not in address:
        errors.append("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞ (–¥. 10 –∏–ª–∏ –¥–æ–º 15)")

    if errors:
        error_message = "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏:\n" + "\n".join(f"- {e}" for e in errors)
        await message.answer(f"{error_message}\n\n{example_address}")
        return

    if not adress_pattern.match(address):
        await message.answer(
            f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞.\n\n{example_address}"
        )
        return

    await state.update_data(address=address)
    await message.answer("‚úÖ –ê–¥—Ä–µ—Å –ø—Ä–∏–Ω—è—Ç! –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ (–ì–ì–ì–ì-–ú–ú-–î–î):")
    await state.set_state(OrderState.waiting_for_date)


@router.message(OrderState.waiting_for_date)
async def process_date(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–∏–µ –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    try:
        await save_fsm_data(message.from_user.id, state)
        if not message.text:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
            return

        try:
            delivery_date = date.fromisoformat(message.text.strip())
            if delivery_date < date.today():
                await message.answer("‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º!")
                return
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")
            return

        await state.update_data(delivery_date=delivery_date)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:00):")
        await state.set_state(OrderState.waiting_for_time)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã!")


@router.message(OrderState.waiting_for_time)
async def process_time(message: Message, state: FSMContext, bot: Bot) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
        bot (Bot): –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.
    """
    await save_fsm_data(message.from_user.id, state)
    if not message.text:
        await message.answer("‚åõ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:00):")
        return

    user_input = message.text.strip()

    try:
        if len(user_input) != 5 or user_input[2] != ":":
            raise ValueError

        hours, minutes = map(int, user_input.split(":"))
        if not (0 <= hours < 24 and 0 <= minutes < 60):
            raise ValueError

        delivery_time = time(hours, minutes)

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:00).")
        return

    await state.update_data(delivery_time=delivery_time)
    await send_invoice(message, bot, state)
    await state.set_state(None)


async def send_invoice(message: Message, bot: Bot, state: FSMContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—á–µ—Ç-—Ñ–∞–∫—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è –æ–ø–ª–∞—Ç—ã.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        bot (Bot): –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    try:
        await save_fsm_data(message.from_user.id, state)
        data = await state.get_data()

        item = data.get("occasion")
        if not item:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        prices = [
            LabeledPrice(label="–ë—É–∫–µ—Ç", amount=int(data["item_price"] * 100)),
            LabeledPrice(label="–î–æ—Å—Ç–∞–≤–∫–∞", amount=50000)
        ]

        await bot.send_invoice(
            chat_id=message.chat.id,
            title="–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞",
            description=f"–ë—É–∫–µ—Ç: {data["item_name"]}",
            payload=f"order_{data["item_name"]}",
            provider_token=settings.PAY_TG_TOKEN,
            currency="rub",
            prices=prices,
            photo_url="https://cs11.pikabu.ru/post_img/2019/02/19/9/155058987464147624.jpg",
            photo_size=100,
            photo_width=800,
            photo_height=450,
            protect_content=True,
            start_parameter="flower_shop",
            request_timeout=30,
        )
    except TelegramBadRequest as e:
        logger.error("–û—à–∏–±–∫–∞ Telegram API: %s", e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: %s", e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.")


@router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery, bot: Bot) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É.

    Args:
        pre_checkout_query (PreCheckoutQuery): –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –æ–ø–ª–∞—Ç—É.
        bot (Bot): –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.
    """
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@router.message(F.successful_payment)
async def process_successful_payment(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    # try:
    #     user_data = await state.get_data()
    #     new_order = await rq.create_order(
    #         user_id=message.from_user.id,
    #         item_id=user_data["occasion"],
    #         name=user_data["name"],
    #         address=user_data["address"],
    #         delivery_date=user_data['delivery_date'].isoformat(),
    #         delivery_time=user_data['delivery_time'].strftime('%H:%M')
    #     )

    #     client_message = (
    #         f"–û–ø–ª–∞—á–µ–Ω–æ: {message.successful_payment.total_amount//100} "
    #         f"{message.successful_payment.currency}\n"
    #         f"‚úÖ –ó–∞–∫–∞–∑ #{new_order.id} –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n"
    #         f"‚ñ™ –ò–º—è: {new_order.name}\n"
    #         f"‚ñ™ –ê–¥—Ä–µ—Å: {new_order.address}\n"
    #         f"‚ñ™ –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {user_data['delivery_date']}\n"
    #         f"‚ñ™ –í—Ä–µ–º—è: {user_data['delivery_time'].strftime('%H:%M')}\n"
    #         "–ó–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –∫—É—Ä—å–µ—Ä—É"
    #     )
    #     await message.answer(client_message)
    #     try:
    #         courier = await rq.get_courier()
    #         if courier:
    #             try:
    #                 courier_delivery = await sync_to_async(
    #                     CourierDelivery.objects.create)(
    #                         courier=courier, order=new_order
    #                     )

    #                 courier_keyboard = create_courier_keyboard(courier_delivery.id)

    #                 courier_message = (
    #                     f">>>>{courier.name}\n"
    #                     "üö® –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n"
    #                     f"üî¢ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{new_order.id}\n"
    #                     f"üì¶ –ê–¥—Ä–µ—Å: {new_order.address}\n"
    #                     f"üìÖ –î–∞—Ç–∞: {user_data['delivery_date']}\n"
    #                     f"‚è∞ –í—Ä–µ–º—è: {user_data['delivery_time'].strftime('%H:%M')}\n"
    #                     f"üë§ –ö–ª–∏–µ–Ω—Ç: {new_order.name}\n"
    #                 )
    #                 try:
    #                     await message.bot.send_message(
    #                         chat_id=courier.tg_id,
    #                         text=courier_message,
    #                         reply_markup=courier_keyboard
    #                     )
    #                 except TelegramBadRequest as e:
    #                     logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä—É: %s", e)

    #             except IntegrityError as e:
    #                 logger.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏: %s", e)
    #                 await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.")
    #                 return
    #         else:
    #             await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—å–µ—Ä–µ.")

    #     except IntegrityError as e:
    #         logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏: {str(e)}")
    #         await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∫—É—Ä—å–µ—Ä–∞.")

    #     await sync_to_async(FSMData.objects.filter(user_id=message.from_user.id).delete)()
    #     await state.clear()

    # except Exception as e:
    #     logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã: {str(e)}")
    #     await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_data = await state.get_data()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ["occasion", "name", "address", "delivery_date", "delivery_time"]
        for field in required_fields:
            if field not in user_data:
                raise KeyError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å—Ç—Ä–æ–∫–∏
        delivery_date = (
            user_data["delivery_date"].isoformat() 
            if isinstance(user_data["delivery_date"], date)
            else str(user_data["delivery_date"])
        )
        
        delivery_time = (
            user_data["delivery_time"].strftime("%H:%M")
            if isinstance(user_data["delivery_time"], time)
            else str(user_data["delivery_time"])
        )

        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        new_order = await rq.create_order(
            user_id=message.from_user.id,
            item_id=user_data["occasion"],
            name=user_data["name"],
            address=user_data["address"],
            delivery_date=delivery_date,
            delivery_time=delivery_time
        )

        if not new_order or not hasattr(new_order, "id"):
            raise ValueError("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞")

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        client_message = (
            f"–û–ø–ª–∞—á–µ–Ω–æ: {message.successful_payment.total_amount // 100} "
            f"{message.successful_payment.currency}\n"
            f"‚úÖ –ó–∞–∫–∞–∑ #{new_order.id} –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n"
            f"‚ñ™ –ò–º—è: {new_order.name}\n"
            f"‚ñ™ –ê–¥—Ä–µ—Å: {new_order.address}\n"
            f"‚ñ™ –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_date}\n"
            f"‚ñ™ –í—Ä–µ–º—è: {delivery_time}\n"
            "–ó–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –∫—É—Ä—å–µ—Ä—É"
        )
        await message.answer(client_message)

        try:
            # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä–∞
            courier = await rq.get_courier()
            if not courier:
                await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤.")
                return

            try:
                # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –¥–æ—Å—Ç–∞–≤–∫–µ
                courier_delivery = await sync_to_async(CourierDelivery.objects.create)(
                    courier=courier, 
                    order=new_order
                )
            except IntegrityError as e:
                logger.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏: %s", e)
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.")
                return

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä—É
            courier_keyboard = create_courier_keyboard(courier_delivery.id)
            courier_message = (
                f">>>>{courier.name}\n"
                "üö® –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n"
                f"üî¢ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{new_order.id}\n"
                f"üì¶ –ê–¥—Ä–µ—Å: {new_order.address}\n"
                f"üìÖ –î–∞—Ç–∞: {delivery_date}\n"
                f"‚è∞ –í—Ä–µ–º—è: {delivery_time}\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {new_order.name}\n"
            )
            
            try:
                await message.bot.send_message(
                    chat_id=courier.tg_id,
                    text=courier_message,
                    reply_markup=courier_keyboard
                )
            except TelegramBadRequest as e:
                logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä—É: %s", e)

        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–∞: %s", e)
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞.")

        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        await sync_to_async(FSMData.objects.filter(
            user_id=message.from_user.id
        ).delete)()
        await state.clear()

    except KeyError as e:
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á –≤ –¥–∞–Ω–Ω—ã—Ö: %s", e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞.")
    except ValueError as e:
        logger.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: %s", e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.")
    except Exception as e:
        logger.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: %s", exc_info=True)
        await message.answer("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

@router.callback_query(F.data.startswith("delivered_"))
async def process_delivered(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–º–µ—Ç–∫—É –æ –¥–æ—Å—Ç–∞–≤–∫–µ.

    Args:
        callback (CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    courier_delivery_id = int(callback.data.split("_")[1])
    courier_delivery = await sync_to_async(CourierDelivery.objects.get)(id=courier_delivery_id)
    courier_delivery.delivered = True
    courier_delivery.delivered_at = timezone.now()
    await sync_to_async(courier_delivery.save)()
    await callback.message.answer("‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π!")


@router.message(F.text == "–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")
async def consultation_1(message: Message, state: FSMContext) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    await state.set_state(OrderState.waiting_consultation)
    await save_fsm_data(message.from_user.id, state)
    await message.answer(
        "üìû –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ø—Ä–∏–º–µ—Ä: +79161234567 –∏–ª–∏ 89161234567),"
        "–∏ –Ω–∞—à —Ñ–ª–æ—Ä–∏—Å—Ç –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ 20 –º–∏–Ω—É—Ç"
    )
    await state.set_state(OrderState.waiting_for_phone)


@router.message(OrderState.waiting_for_phone)
async def consultation(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    await save_fsm_data(message.from_user.id, state)
    phone = message.text.strip()

    if not re.match(r"^(\+7|8)[\d\- ]{10,}$", phone):
        await message.answer("–ù–æ–º–µ—Ä –≤–≤–µ–¥—ë–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, "
                             "–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79161234567 –∏–ª–∏ 89161234567"
                             )
        return

    await state.update_data(phone=phone)

    await message.answer(
        f'üìû –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–µ - {phone}\n'
        f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –µ–≥–æ!',
        reply_markup=await confirm_phone_keyboard()
        )

    await state.set_state(OrderState.confrim_for_phone)


@router.callback_query(F.data == 'confirm_phone', OrderState.confrim_for_phone)
async def confirm_phone(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        callback (CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    try:
        confirm_data = await state.get_data()
        phone = confirm_data.get('phone')   

        await callback.message.answer(
            f'üìû –í–∞—à –Ω–æ–º–µ—Ä - {phone} \n'
            f'üë§ –ù–∞—à —Ñ–ª–æ—Ä–∏—Å—Ç –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ 20 –º–∏–Ω—É—Ç'
        )
        try:
            florist = await sync_to_async(Florist.objects.filter(status='active').first)()
            if florist:

                florist_callback = await sync_to_async(
                    FloristCallback.objects.create)(
                        phone_number=phone,
                        needs_callback=True,
                        order=None,
                        florist=florist
                )

                florist_keyboard = create_florist_keyboard(florist_callback.id)

                flourist_message = (
                    "–ó–≤–æ–Ω–æ–∫ –∫–ª–∏–µ–Ω—Ç—É:\n"
                    "üö® –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç—É\n"
                    f"üî¢ –ù–æ–º–µ—Ä —Ç–µ–ª: #{phone}"
                )

                await callback.bot.send_message(
                    chat_id=florist.tg_id,
                    text=flourist_message,
                    reply_markup=florist_keyboard
                )
            else:
                await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–ª–æ—Ä–∏—Å—Ç–æ–≤.")
        except IntegrityError:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {str(e)}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞!")


@router.callback_query(F.data.startswith("call_made_"))
async def process_call_made(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–º–µ—Ç–∫—É –æ —Ç–æ–º, —á—Ç–æ –∑–≤–æ–Ω–æ–∫ —Å–¥–µ–ª–∞–Ω.

    Args:
        callback (CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        florist_callback_id = int(callback.data.split("_")[2])
        florist_callback = await sync_to_async(FloristCallback.objects.get)(
            id=florist_callback_id
        )
        florist_callback.callback_made = True
        await sync_to_async(florist_callback.save)()
        await callback.message.answer("‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–≤—à–∏–π!")
    except ObjectDoesNotExist:
        await callback.answer("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–≤–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–æ–Ω–∫–∞: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞!")


@router.callback_query(F.data == 'edit_phone', OrderState.confrim_for_phone)
async def edit_phone(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑–º–µ–Ω–∏—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.

    Args:
        callback (CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    await save_fsm_data(callback.from_user.id, state)
    await state.update_data(phone=None)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä!')
    await state.set_state(OrderState.waiting_for_phone)
    await callback.answer()


@router.message(F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—é –∫–æ–ª–ª–µ–∫—Ü–∏—é")
async def collection(message: Message, state: FSMContext) -> None:
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –±—É–∫–µ—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    await save_fsm_data(message.from_user.id, state)
    data = await state.get_data()
    occasion = data.get("occasion")

    all_items = await get_category_item(occasion)

    if not all_items:
        await message.answer("–ë—É–∫–µ—Ç–æ–≤ –ø–æ –¥–∞–Ω–Ω–æ–º—É —Å–æ–±—ã—Ç–∏—é –Ω–µ—Ç.")
        return

    await state.update_data(
        filtered_items=all_items,
        current_page=1
    )

    items_on_page = all_items[:3]
    keyboard = await items(items_on_page)

    if len(all_items) > 3:
        total_pages = (len(all_items) + 2) // 3
        navigation_buttons = create_pagination_buttons(1, total_pages)
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=(
                keyboard.inline_keyboard +
                navigation_buttons.inline_keyboard
            )
        )

    await message.answer(
        "–í—Å–µ –±—É–∫–µ—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å–æ–±—ã—Ç–∏—é:",
        reply_markup=keyboard
    )


@router.callback_query(F.data.startswith("page_"))
async def handle_pagination(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º.

    Args:
        callback (CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    data = await state.get_data()
    all_items = data.get("filtered_items")
    current_page = data.get("current_page", 1)

    if not all_items:
        await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—É–∫–µ—Ç–æ–≤.")
        return

    if callback.data.startswith("page_"):
        new_page = int(callback.data.split("_")[1])
        await state.update_data(current_page=new_page)
        current_page = new_page

    start_index = (current_page - 1) * 3
    end_index = start_index + 3
    items_on_page = all_items[start_index:end_index]

    if not items_on_page:
        await callback.message.answer("–ù–µ—Ç –±—É–∫–µ—Ç–æ–≤ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
        return

    keyboard = await items(items_on_page)
    total_pages = (len(all_items) + 2) // 3
    navigation_buttons = create_pagination_buttons(current_page, total_pages)

    page_info = f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page} –∏–∑ {total_pages}"
    await callback.message.edit_text(
        f"{page_info}\n–í—Å–µ –±—É–∫–µ—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å–æ–±—ã—Ç–∏—é:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=(
                keyboard.inline_keyboard +
                navigation_buttons.inline_keyboard
            )
        )
    )


@router.message()
async def unknown_message(message: Message) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥–æ–π /start", reply_markup=kb.main_menu)