from datetime import date, time
from bot.models import Order
from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, FSInputFile, Message
from aiogram.types import LabeledPrice, PreCheckoutQuery
from environs import Env
import bot.requests as rq
import bot.keyboards as kb
from bot.keyboards import filter_bouquets, items
from aiogram import Bot
router = Router()


# –°–æ—Å—Ç–æ—è–Ω–∏—è
class OrderState(StatesGroup):
    choosing_occasion = State()
    choosing_price = State()
    waiting_for_name = State()
    waiting_for_address = State()
    waiting_for_date = State()
    waiting_for_time = State()


@router.message(CommandStart())
async def cmd_start(message: Message):
    await rq.set_user(message.from_user.id)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω —Ü–≤–µ—Ç–æ–≤ 'FlowerShop'."
        "–ó–∞–∫–∞–∂–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–≥–æ –±—É–∫–µ—Ç–∞, —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—à–∏—Ö –ª—é–±–∏–º—ã—Ö, "
        "—Ä–æ–¥–Ω—ã—Ö –∏ –∫–æ–ª–ª–µ–≥. –ù–∞—à –±—É–∫–µ—Ç —Å–æ —Å–º—ã—Å–ª–æ–º —Å—Ç–∞–Ω–µ—Ç –≥–ª–∞–≤–Ω—ã–º –ø–æ–¥–∞—Ä–∫–æ–º –Ω–∞ –≤–∞—à–µ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–µ!"
        "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
    )
    pdf_file = "form.pdf"
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF-—Ñ–∞–π–ª
        await message.answer_document(FSInputFile(pdf_file))
    except FileNotFoundError:
        await message.answer("–§–∞–π–ª —Å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await message.answer(
        "–ü–æ—Å–ª–µ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
        "‚úÖ –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–∏–Ω—è—Ç—å', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É—Å–ª—É–≥–∞–º–∏ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.\n\n"

        "‚ö†Ô∏è–ù–∞–∂–∏–º–∞—è '–ü—Ä–∏–Ω—è—Ç—å', —è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é —Å–≤–æ—ë —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.",
        reply_markup=kb.form_button
    )

@router.callback_query(F.data == "to_main")
async def to_main(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("–í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é.", reply_markup=kb.menu)


@router.message(F.text == "–ü—Ä–∏–Ω—è—Ç—å")
async def event_form(message: Message, state: FSMContext):
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –í—ã –ø—Ä–∏–Ω—è–ª–∏ —É—Å–ª–æ–≤–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. "
        "–¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É. üõ†Ô∏è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    await catalog(message, state)


@router.message(F.text == "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è")
async def not_event_form(message: Message, state: FSMContext):
    await message.answer(
        "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. "
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start."
    )
    await state.clear()     # –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ /start


# –ö–∞—Ç–∞–ª–æ–≥ ["–î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è", "–°–≤–∞–¥—å–±–∞", "–í —à–∫–æ–ª—É", "–ë–µ–∑ –ø–æ–≤–æ–¥–∞", "–î—Ä—É–≥–æ–π –ø–æ–≤–æ–¥"]
@router.message(F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—é –∫–æ–ª–ª–µ–∫—Ü–∏—é")
async def catalog(message: Message, state: FSMContext):
    await state.set_state(OrderState.choosing_occasion)
    await message.answer(
        "–î–∞–≤–∞–π—Ç–µ –ø–æ–¥–±–µ—Ä–µ–º –±—É–∫–µ—Ç.\n"
        "–ö –∫–∞–∫–æ–º—É —Å–æ–±—ã—Ç–∏—é –≥–æ—Ç–æ–≤–∏–º—Å—è? –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –ª–∏–±–æ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π",
        reply_markup=await kb.categories())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–≤–æ–¥–∞
@router.callback_query(F.data.startswith("category_"), OrderState.choosing_occasion)
async def choose_occasion(callback: CallbackQuery, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–≤–æ–¥
    occasion = callback.data.split("_")[1]
    await state.update_data(occasion=occasion)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å—É–º–º—ã
    await state.set_state(OrderState.choosing_price)

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Å—É–º–º—É
    await callback.message.answer(
        "–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?",
        reply_markup=await kb.price()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã
@router.callback_query(F.data.startswith("price_"), OrderState.choosing_price)
async def choose_price(callback: CallbackQuery, state: FSMContext):
    price = callback.data.split("_")[1]
    await state.update_data(price=price)

    data = await state.get_data()
    occasion = data.get("occasion")
    price = data.get("price")

    filtered_items = await filter_bouquets(occasion, price)

    if filtered_items:
        keyboard = await items(filtered_items)
        await callback.message.answer("–í–æ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –±—É–∫–µ—Ç—ã:", reply_markup=keyboard)
    else:
        await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –±—É–∫–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


@router.callback_query(F.data.startswith("item_"))
async def category(callback: CallbackQuery):
    item_data = await rq.get_item(callback.data.split("_")[1])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
    photo = FSInputFile(f"media/bouquets/{item_data.id}.jpg")
    await callback.message.answer_photo(photo=photo)
    await callback.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä {item_data.name}")
    await callback.message.answer(f"*–ë—É–∫–µ—Ç:* {item_data.name}\n"
                                  f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {item_data.description}\n"
                                  f"*–¶–≤–µ—Ç–æ—á–Ω—ã–π —Å–æ—Å—Ç–∞–≤:* {item_data.structure}\n"
                                  f"*–¶–µ–Ω–∞:* {item_data.price}—Ä.",
                                  parse_mode="Markdown")
    await callback.message.answer(
        "*–•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –µ—â–µ –±–æ–ª–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ?*\n"
        "*–ü–æ–¥–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –±—É–∫–µ—Ç –∏–∑ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–ª–∏ –∑–∞–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Ñ–ª–æ—Ä–∏—Å—Ç–∞*",
        parse_mode="Markdown",
        reply_markup=kb.menu
        )


@router.message(F.text == "–ó–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç")
async def order(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")
    await state.set_state(OrderState.waiting_for_name)


@router.message(OrderState.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(OrderState.waiting_for_address)


@router.message(OrderState.waiting_for_address)
async def process_address(message: Message, state: FSMContext):
    await state.update_data(address=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-03-30):")
    await state.set_state(OrderState.waiting_for_date)


@router.message(OrderState.waiting_for_date)
async def process_date(message: Message, state: FSMContext):
    await state.update_data(date=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:00):")
    await state.set_state(OrderState.waiting_for_time)


@router.message(OrderState.waiting_for_time)
async def process_time(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(time=message.text)
    user_data = await state.get_data()
    try:
        delivery_date = date.fromisoformat(user_data['date'])
        delivery_time = time.fromisoformat(user_data['time'])
        item_id = user_data['occasion']

        new_order = await rq.create_order(
            user_id=message.from_user.id,
            item_id=item_id,
            name=user_data['name'],
            address=user_data['address'],
            date=delivery_date,
            time=delivery_time
        )

        await send_invoice(message, bot, new_order)
    # TODO: –õ–æ–≥–∏–∫–∞ –ø–æ–¥—Ü–≤–µ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ –∏ –¥–∞–ª–µ–µ –ø—É—Å—Ç–∏—Ç—å –æ–ø–ª–∞—Ç—É
    except KeyError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ {e}")
    except ValueError as e:
        await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: {e}")
    except Exception as e:
        await message.answer("üò¢ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"Error: {e}")

    await state.clear()


# TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á—É —Ü–µ–Ω—ã –±—É–∫–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±—Ä–∞–ª –∫–ª–∏–µ–Ω—Ç
# 4000 0000 0000 0002 —Ç–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞
async def send_invoice(message: Message, bot: Bot, order):
    print(f"[order] {order.id} {order.name} {order.address} {order.data} {order.delivery_time}")
    env = Env()
    env.read_env()
    pay_token = env.str("PAY_TG_TOKEN")

    await bot.send_invoice(
        chat_id=message.chat.id,
        title=f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order.id}",
        description="–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞",
        payload=f"order_{order.id}",
        provider_token=pay_token,
        currency="rub",
        prices=[
            LabeledPrice(label="–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞", amount=5000),
            LabeledPrice(label="–ù–î–°", amount=100)
        ],
        # photo_url="https://shtrih-m-nsk.ru/upload/medialibrary/4b3/kkt_shtrikh_mini_02f-_9_.jpg",
        photo_size=100,
        photo_width=800,
        photo_height=450,
        need_name=False,
        is_flexible=False,
        protect_content=True,
        request_timeout=30,
        start_parameter='time-machine-example',
    )


@router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery, bot: Bot):
    print(f"[pre_checkout_query] {pre_checkout_query}")
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@router.message(F.content_type == "successful_payment")
async def process_successful_payment(message: Message):
    print(f"[message.successful_payment] {message.successful_payment}")
    msg = (f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É {message.successful_payment.total_amount}"
           f"{message.successful_payment.currency}\n"
           "–ó–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –∫—É—Ä—å–µ—Ä—É")
    await message.answer(msg)


# TODO: –õ–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–æ–∫ –ë–µ–∑ –ø–æ–≤–æ–¥–∞
# TODO: –õ–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–æ–∫ –î—Ä—É–≥–æ–π –ø–æ–≤–æ–¥ —Å –ø–æ–¥–º–µ–Ω—é, –≥–¥–µ –±–æ—Ç –ø—Ä–æ—Å–∏—Ç –Ω–∞–ø–∏—Å–∞—Ç—å ‚Äú–∫–∞–∫–æ–π –ø–æ–≤–æ–¥‚Äù.

# TODO: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞. –ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é (–∫–Ω–æ–ø–∫–∞)
@router.message(F.text == "–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")
async def consultation(message: Message):
    pass


# TODO: –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—é –∫–æ–ª–ª–µ–∫—Ü–∏—é (–∫–Ω–æ–ø–∫–∞)
@router.message(F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—é –∫–æ–ª–ª–µ–∫—Ü–∏—é")
async def collection(message: Message):
    await catalog(message, None)
